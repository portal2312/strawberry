# ---
# Poetry
# https://python-poetry.org/docs/basic-usage/#initialising-a-pre-existing-project
[tool.poetry]
name = "strawberry-demo"
version = "0.1.0"
description = ""
authors = ["portal2312 <portal2312@gmail.com>"]
readme = "README.md"
# https://python-poetry.org/docs/basic-usage/#operating-modes
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
django = "^5.1.3"
channels = "^4.1.0"
daphne = "^4.1.2"
strawberry-graphql = "^0.248.0"
strawberry-graphql-django = "^0.49.1"
gunicorn = "^23.0.0"
uvicorn = "^0.29.0"
django-choices-field = "^2.3.0"
pydantic = "^2.8.2"

[tool.poetry.group.dev.dependencies]
debugpy = "^1.8.1"
mypy = "^1.13.0"
django-stubs = "^5.1.1"
ruff = "^0.11.4"
jupyterlab = "^4.2.0"
pyyaml = "^6.0.1"
pytest = "^8.3.5"
pytest-xdist = "^3.6.1"
pytest-django = "^4.11.1"
django-debug-toolbar = "^5.1.0"

pytest-watch = "^4.2.0"
pytest-cov = "^6.1.1"
[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ---
# Mypy
# https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
[tool.mypy]
plugins = [
    # django-stubs
    # https://github.com/typeddjango/django-stubs
    "mypy_django_plugin.main",
    # Strawberry
    # https://strawberry.rocks/docs/editors/mypy
    "strawberry.ext.mypy_plugin",
    # Pydantic
    # https://docs.pydantic.dev/latest/integrations/mypy/#enabling-the-plugin
    "pydantic.mypy"
]
# Pydantic
# https://docs.pydantic.dev/latest/integrations/mypy/#configuring-the-plugin
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

# https://mypy.readthedocs.io/en/stable/config_file.html#example-pyproject-toml
[[tool.mypy.overrides]]
module = ["my_pydantic.tests"]
check_untyped_defs = false
disallow_untyped_defs = false

# ---
# django-stubs
# https://github.com/typeddjango/django-stubs
[tool.django-stubs]
django_settings_module = "project.settings"

# ---
# Ruff
# https://docs.astral.sh/ruff/configuration/
[tool.ruff]
# https://docs.astral.sh/ruff/settings/#exclude
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "**/migrations",
]

# https://docs.astral.sh/ruff/settings/#lint
[tool.ruff.lint]
# https://docs.astral.sh/ruff/settings/#lint_dummy-variable-rgx
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# https://docs.astral.sh/ruff/settings/#lint_extend-select
extend-select = [
    # flake8-bandit
    # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "S",
    # fake8-django
    # https://docs.astral.sh/ruff/rules/#flake8-django-dj
    "DJ",
    # flake8-pytest-style
    # https://docs.astral.sh/ruff/rules/#flake8-pyi-pyi
    "PT",
    # flake8-type-checking
    # https://docs.astral.sh/ruff/rules/#flake8-type-checking-tc
    "TC",
    # Isort
    # https://docs.astral.sh/ruff/rules/#isort-i
    "I",
    # Pycodestyle
    # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "E",
    "W",
    # Pydoclint
    # https://docs.astral.sh/ruff/rules/#pydoclint-doc
    "DOC",
    # Pydocstyle
    # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "D",
    # Pyflakes
    # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "F",
    # Pylint
    # https://docs.astral.sh/ruff/rules/#pylint-pl
    "PL"
]
# https://docs.astral.sh/ruff/settings/#lint_ignore
ignore = [
    # https://docs.astral.sh/ruff/rules/undocumented-public-class/#undocumented-public-class-d101
    "D101",
    # https://docs.astral.sh/ruff/rules/multi-line-summary-first-line/#multi-line-summary-first-line-d212
    "D212",
    # https://docs.astral.sh/ruff/rules/assert/#assert-s101
    "S101",
    # https://docs.astral.sh/ruff/rules/undocumented-param/#undocumented-param-d417
    "D417",
]
# https://docs.astral.sh/ruff/settings/#lint_unfixable
unfixable = ["D417"]

# https://docs.astral.sh/ruff/settings/#lint_per-file-ignores
[tool.ruff.lint.per-file-ignores]

# https://docs.astral.sh/ruff/settings/#lintflake8-bandit
[tool.ruff.lint.flake8-bandit]

# https://docs.astral.sh/ruff/settings/#lintflake8-pytest-style
[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

# https://docs.astral.sh/ruff/settings/#lintflake8-type-checking
[tool.ruff.lint.flake8-type-checking]
quote-annotations = true

# https://docs.astral.sh/ruff/settings/#lintisort
[tool.ruff.lint.isort]
lines-between-types = 1

# https://docs.astral.sh/ruff/settings/#lintpycodestyle
[tool.ruff.lint.pycodestyle]

# https://docs.astral.sh/ruff/settings/#lintpydoclint
[tool.ruff.lint.pydoclint]

# https://docs.astral.sh/ruff/settings/#lintpydocstyle
[tool.ruff.lint.pydocstyle]
convention = "google"

# https://docs.astral.sh/ruff/settings/#lintpyflakes
[tool.ruff.lint.pyflakes]

# https://docs.astral.sh/ruff/settings/#lintpylint
[tool.ruff.lint.pylint]
