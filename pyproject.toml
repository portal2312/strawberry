# ---
# Poetry
# https://python-poetry.org/docs/basic-usage/#initialising-a-pre-existing-project
[tool.poetry]
name = "strawberry-demo"
version = "0.1.0"
description = ""
authors = ["portal2312 <portal2312@gmail.com>"]
readme = "README.md"
# https://python-poetry.org/docs/basic-usage/#operating-modes
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
django = "^5.0.6"
django-debug-toolbar = "^4.3.0"
channels = "^4.1.0"
daphne = "^4.1.2"
strawberry-graphql = "^0.230.0"
strawberry-graphql-django = "^0.40.0"
gunicorn = "^22.0.0"
uvicorn = "^0.29.0"
django-choices-field = "^2.3.0"
pydantic = "^2.8.2"

[tool.poetry.group.dev.dependencies]
debugpy = "^1.8.1"
mypy = "^1.10.0"
django-stubs = "^5.0.0"
ruff = "^0.4.5"
jupyterlab = "^4.2.0"
pyyaml = "^6.0.1"
bandit = { extras = ["toml"], version = "^1.7.8" }

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "*"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ---
# Mypy
# https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
[tool.mypy]
plugins = [
    # django-stubs
    # https://github.com/typeddjango/django-stubs
    "mypy_django_plugin.main",
    # strawberry
    # https://strawberry.rocks/docs/editors/mypy
    "strawberry.ext.mypy_plugin"
]

# ---
# django-stubs
# https://github.com/typeddjango/django-stubs
[tool.django-stubs]
django_settings_module = "project.settings"

# ---
# Ruff
# https://docs.astral.sh/ruff/configuration/
# https://docs.astral.sh/ruff/settings/#lintpydocstyle
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "**/migrations",
]
# https://docs.astral.sh/ruff/faq/#does-ruff-support-jupyter-notebooks
# https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff
extend-include = ["*.ipynb"]

# Same as Black.
# line-length = 88
# indent-width = 4
[tool.ruff.lint]
# Enable all `pydocstyle` rules, limiting to those that adhere to the
# Google convention via `convention = "google"`, below.
#
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["D", "E4", "E7", "E9", "F"]
# On top of the Google convention, disable `D417`, which requires
# documentation for every function parameter.
ignore = ["D212", "D417"]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false
# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]
convention = "google"

# ---
# Bandit
# https://bandit.readthedocs.io/en/latest/config.html
[tool.bandit]

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
    "os.execl",
    "os.execle",
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile",
]
shell = [
    "os.system",
    "os.popen",
    "os.popen2",
    "os.popen3",
    "os.popen4",
    "popen2.popen2",
    "popen2.popen3",
    "popen2.popen4",
    "popen2.Popen3",
    "popen2.Popen4",
    "commands.getoutput",
    "commands.getstatusoutput",
    "subprocess.getoutput",
    "subprocess.getstatusoutput",
]
subprocess = [
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.check_call",
    "subprocess.check_output",
    "subprocess.run",
]

[tool.bandit.assert_used]
skips = []

[tool.bandit.hardcoded_tmp_directory]
tmp_dirs = ["/tmp", "/var/tmp", "/dev/shm"]

[tool.bandit.linux_commands_wildcard_injection]
no_shell = [
    "os.execl",
    "os.execle",
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile",
]
shell = [
    "os.system",
    "os.popen",
    "os.popen2",
    "os.popen3",
    "os.popen4",
    "popen2.popen2",
    "popen2.popen3",
    "popen2.popen4",
    "popen2.Popen3",
    "popen2.Popen4",
    "commands.getoutput",
    "commands.getstatusoutput",
    "subprocess.getoutput",
    "subprocess.getstatusoutput",
]
subprocess = [
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.check_call",
    "subprocess.check_output",
    "subprocess.run",
]

[tool.bandit.ssl_with_bad_defaults]
bad_protocol_versions = [
    "PROTOCOL_SSLv2",
    "SSLv2_METHOD",
    "SSLv23_METHOD",
    "PROTOCOL_SSLv3",
    "PROTOCOL_TLSv1",
    "SSLv3_METHOD",
    "TLSv1_METHOD",
    "PROTOCOL_TLSv1_1",
    "TLSv1_1_METHOD",
]

[tool.bandit.ssl_with_bad_version]
bad_protocol_versions = [
    "PROTOCOL_SSLv2",
    "SSLv2_METHOD",
    "SSLv23_METHOD",
    "PROTOCOL_SSLv3",
    "PROTOCOL_TLSv1",
    "SSLv3_METHOD",
    "TLSv1_METHOD",
    "PROTOCOL_TLSv1_1",
    "TLSv1_1_METHOD",
]

[tool.bandit.start_process_with_a_shell]
no_shell = [
    "os.execl",
    "os.execle",
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile",
]
shell = [
    "os.system",
    "os.popen",
    "os.popen2",
    "os.popen3",
    "os.popen4",
    "popen2.popen2",
    "popen2.popen3",
    "popen2.popen4",
    "popen2.Popen3",
    "popen2.Popen4",
    "commands.getoutput",
    "commands.getstatusoutput",
    "subprocess.getoutput",
    "subprocess.getstatusoutput",
]
subprocess = [
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.check_call",
    "subprocess.check_output",
    "subprocess.run",
]

[tool.bandit.start_process_with_no_shell]
no_shell = [
    "os.execl",
    "os.execle",
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile",
]
shell = [
    "os.system",
    "os.popen",
    "os.popen2",
    "os.popen3",
    "os.popen4",
    "popen2.popen2",
    "popen2.popen3",
    "popen2.popen4",
    "popen2.Popen3",
    "popen2.Popen4",
    "commands.getoutput",
    "commands.getstatusoutput",
    "subprocess.getoutput",
    "subprocess.getstatusoutput",
]
subprocess = [
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.check_call",
    "subprocess.check_output",
    "subprocess.run",
]

[tool.bandit.start_process_with_partial_path]
no_shell = [
    "os.execl",
    "os.execle",
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile",
]
shell = [
    "os.system",
    "os.popen",
    "os.popen2",
    "os.popen3",
    "os.popen4",
    "popen2.popen2",
    "popen2.popen3",
    "popen2.popen4",
    "popen2.Popen3",
    "popen2.Popen4",
    "commands.getoutput",
    "commands.getstatusoutput",
    "subprocess.getoutput",
    "subprocess.getstatusoutput",
]
subprocess = [
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.check_call",
    "subprocess.check_output",
    "subprocess.run",
]

[tool.bandit.subprocess_popen_with_shell_equals_true]
no_shell = [
    "os.execl",
    "os.execle",
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile",
]
shell = [
    "os.system",
    "os.popen",
    "os.popen2",
    "os.popen3",
    "os.popen4",
    "popen2.popen2",
    "popen2.popen3",
    "popen2.popen4",
    "popen2.Popen3",
    "popen2.Popen4",
    "commands.getoutput",
    "commands.getstatusoutput",
    "subprocess.getoutput",
    "subprocess.getstatusoutput",
]
subprocess = [
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.check_call",
    "subprocess.check_output",
    "subprocess.run",
]

[tool.bandit.subprocess_without_shell_equals_true]
no_shell = [
    "os.execl",
    "os.execle",
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile",
]
shell = [
    "os.system",
    "os.popen",
    "os.popen2",
    "os.popen3",
    "os.popen4",
    "popen2.popen2",
    "popen2.popen3",
    "popen2.popen4",
    "popen2.Popen3",
    "popen2.Popen4",
    "commands.getoutput",
    "commands.getstatusoutput",
    "subprocess.getoutput",
    "subprocess.getstatusoutput",
]
subprocess = [
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.check_call",
    "subprocess.check_output",
    "subprocess.run",
]

[tool.bandit.try_except_continue]
check_typed_exception = false

[tool.bandit.try_except_pass]
check_typed_exception = false

[tool.bandit.weak_cryptographic_key]
weak_key_size_dsa_high = 1024
weak_key_size_dsa_medium = 2048
weak_key_size_ec_high = 160
weak_key_size_ec_medium = 224
weak_key_size_rsa_high = 1024
weak_key_size_rsa_medium = 2048
